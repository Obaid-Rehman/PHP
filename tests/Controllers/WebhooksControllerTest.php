<?php
/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Tests;

use PQAPIV2Lib\Exceptions\ApiException;
use PQAPIV2Lib\Exceptions;
use PQAPIV2Lib\ApiHelper;
use PQAPIV2Lib\Models;
use PHPUnit\Framework\TestCase;

class WebhooksControllerTest extends TestCase
{
    /**
     * @var \PQAPIV2Lib\Controllers\WebhooksController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getWebhooksController();
    }


    /**
     * Retrieve a list of all webhook subscriptions that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListWebhookSubscriptions()
    {
        // Parameters for the API call
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listWebhookSubscriptions($xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"links":[{"params":{"rel":"self"},"href":"string"}],"payload":[{"links":[{"params":' .
                '{"rel":"self"},"href":"string"}],"url":"https://www.example.com/webhooks","namespace' .
                '":"BANKACCOUNTS.UPDATED.STATUS.APPROVED","token":"webh-2dd54a53-3814-4ce1-862f-dc06b' .
                '09ead4a","created":"2020-01-01","lastUpdated":"2020-02-01"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Create a webhook subscription for a given URL and namespace. When this event fires, the webhook receives a call from the API.
     */
    public function testTestCreateWebhookSubscription()
    {
        // Parameters for the API call
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->createWebhookSubscription($xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"links":[{"params":{"rel":"self"},"href":"string"}],"url":"https://www.example.com/' .
                'webhooks","namespace":"BANKACCOUNTS.UPDATED.STATUS.APPROVED","token":"webh-2dd54a53-' .
                '3814-4ce1-862f-dc06b09ead4a","created":"2020-01-01"}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Create a webhook subscription for a given URL and namespace. When this event fires, the webhook receives a call from the API.
     */
    public function testTestCreateWebhookSubscription1()
    {
        // Parameters for the API call
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->createWebhookSubscription($xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            201,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 201"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );
    }
}
