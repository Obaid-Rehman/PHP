<?php
/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Tests;

use PQAPIV2Lib\Exceptions\ApiException;
use PQAPIV2Lib\Exceptions;
use PQAPIV2Lib\ApiHelper;
use PQAPIV2Lib\Models;
use PQAPIV2Lib\Utils\DateTimeHelper;
use PHPUnit\Framework\TestCase;

class UsersControllerTest extends TestCase
{
    /**
     * @var \PQAPIV2Lib\Controllers\UsersController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getUsersController();
    }


    /**
     * Update a user object (change email, address change, etc.) using a user token.
     */
    public function testTestUpdateUser()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->updateUser($userToken, $xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phoneNumber":"760' .
                '-350-0324","phoneNumberCountry":"US","mobileNumber":"213-446-5755","mobileNumberCoun' .
                'try":"US","addressLine1":"290 Carriage Court","city":"Los Angeles","region":"CA","co' .
                'untry":"US","postalCode":"90017","addressType":"RESIDENTIAL","email":"jsmith@payquic' .
                'ker.com","gender":"FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","l' .
                'anguage":"en-US","countryOfBirth":"US","countryOfNationality":"US","token":"user-f01' .
                '2bc86-4d42-415b-a8b2-be5e0b90e59a","status":"PRE_ACTIVATED","createdOn":"2020-02-24T' .
                '22:00:00Z","links":[{"params":{"rel":"self"},"href":"https://platform.mypayquicker.c' .
                'om/api/v2/users/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve a single user record by user token.
     */
    public function testTestRetrieveUser()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->retrieveUser($userToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phoneNumber":"760' .
                '-350-0324","phoneNumberCountry":"US","mobileNumber":"213-446-5755","mobileNumberCoun' .
                'try":"US","addressLine1":"290 Carriage Court","city":"Los Angeles","region":"CA","co' .
                'untry":"US","postalCode":"90017","addressType":"RESIDENTIAL","email":"jsmith@payquic' .
                'ker.com","gender":"FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","l' .
                'anguage":"en-US","countryOfBirth":"US","countryOfNationality":"US","token":"user-f01' .
                '2bc86-4d42-415b-a8b2-be5e0b90e59a","status":"PRE_ACTIVATED","createdOn":"2020-02-24T' .
                '22:00:00Z","links":[{"params":{"rel":"self"},"href":"https://platform.mypayquicker.c' .
                'om/api/v2/users/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve a list of all users that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListUsers()
    {
        // Parameters for the API call
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listUsers($xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['X-TimeZone'] = null ;
        $headers['X-Paging-PageNo'] = null ;
        $headers['X-Paging-PageCount'] = null ;
        $headers['X-Paging-PageSize'] = null ;
        $headers['X-Paging-TotalRecordCount'] = null ;
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"payload":[{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phone' .
                'Number":"760-350-0324","phoneNumberCountry":"US","mobileNumber":"213-446-5755","mobi' .
                'leNumberCountry":"US","addressLine1":"290 Carriage Court","city":"Los Angeles","regi' .
                'on":"CA","country":"US","postalCode":"90017","addressType":"RESIDENTIAL","email":"js' .
                'mith@payquicker.com","gender":"FEMALE","userType":"INDIVIDUAL","programUserId":"d97c' .
                'e0519b2d","language":"en-US","countryOfBirth":"US","countryOfNationality":"US","toke' .
                'n":"usr-3b8a0c25-c7e2-4bb7-904e-0a2a66001357","status":"PRE_ACTIVATED","links":[{"pa' .
                'rams":{"rel":"self"},"href":"https://platform.mypayquicker.com/api/v2/users/usr-3b8a' .
                '0c25-c7e2-4bb7-904e-0a2a66001357"}]}],"links":[{"params":{"rel":"self"},"href":"http' .
                's://platform.mypayquicker.com/api/v2/users"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Create a new user. Payload contains both required and optional fields for user- and company-based users, allowing for the creation of a corporate/partnership/dba (i.e., Grubhub model) user along with a standard end user (i.e., <i>Payee</i>). The type of the user (<i>Business</i> vs. <i>User</i>) and type of business (<i>Corporation</i> vs. <i>Partnership</i>) provide context that impacts KYC etc.
     */
    public function testTestCreateUser()
    {
        // Parameters for the API call
        $xMyPayQuickerVersion = '2020.02.24';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phoneNumber":"760-350' .
            '-0324","phoneNumberCountry":"US","mobileNumber":"213-446-5755","mobileNumberCountry":"US' .
            '","addressLine1":"290 Carriage Court","city":"Los Angeles","region":"CA","country":"US",' .
            '"postalCode":"90017","addressType":"RESIDENTIAL","email":"jsmith@payquicker.com","gender' .
            '":"FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","language":"en-US","co' .
            'untryOfBirth":"US","countryOfNationality":"US"}'),
            'PQAPIV2Lib\Models\\UserBase'
        );

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->createUser($xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phoneNumber":"760' .
                '-350-0324","phoneNumberCountry":"US","mobileNumber":"213-446-5755","mobileNumberCoun' .
                'try":"US","addressLine1":"290 Carriage Court","city":"Los Angeles","region":"CA","co' .
                'untry":"US","postalCode":"90017","addressType":"RESIDENTIAL","email":"jsmith@payquic' .
                'ker.com","gender":"FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","l' .
                'anguage":"en-US","countryOfBirth":"US","countryOfNationality":"US","token":"user-f01' .
                '2bc86-4d42-415b-a8b2-be5e0b90e59a","status":"PRE_ACTIVATED","createdOn":"2020-02-24T' .
                '22:00:00Z","links":[{"params":{"rel":"self"},"href":"https://platform.mypayquicker.c' .
                'om/api/v2/users/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Create a new user. Payload contains both required and optional fields for user- and company-based users, allowing for the creation of a corporate/partnership/dba (i.e., Grubhub model) user along with a standard end user (i.e., <i>Payee</i>). The type of the user (<i>Business</i> vs. <i>User</i>) and type of business (<i>Corporation</i> vs. <i>Partnership</i>) provide context that impacts KYC etc.
     */
    public function testTestCreateUser1()
    {
        // Parameters for the API call
        $xMyPayQuickerVersion = '2020.02.24';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phoneNumber":"760-350' .
            '-0324","phoneNumberCountry":"US","mobileNumber":"213-446-5755","mobileNumberCountry":"US' .
            '","addressLine1":"290 Carriage Court","city":"Los Angeles","region":"CA","country":"US",' .
            '"postalCode":"90017","addressType":"RESIDENTIAL","email":"jsmith@payquicker.com","gender' .
            '":"FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","language":"en-US","co' .
            'untryOfBirth":"US","countryOfNationality":"US"}'),
            'PQAPIV2Lib\Models\\UserBase'
        );

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->createUser($xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            201,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 201"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phoneNumber":"760' .
                '-350-0324","phoneNumberCountry":"US","mobileNumber":"213-446-5755","mobileNumberCoun' .
                'try":"US","addressLine1":"290 Carriage Court","city":"Los Angeles","region":"CA","co' .
                'untry":"US","postalCode":"90017","addressType":"RESIDENTIAL","email":"jsmith@payquic' .
                'ker.com","gender":"FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","l' .
                'anguage":"en-US","countryOfBirth":"US","countryOfNationality":"US","token":"user-f01' .
                '2bc86-4d42-415b-a8b2-be5e0b90e59a","status":"PRE_ACTIVATED","createdOn":"2020-02-24T' .
                '22:00:00Z","links":[{"params":{"rel":"self"},"href":"https://platform.mypayquicker.c' .
                'om/api/v2/users/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve a list of IDV checks by user token that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListUserIDVChecks()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listUserIDVChecks($userToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"payload":[{"idvProviderReference":"yPV0h4o1Yw3QzdLAvA7a","idvResult":"PASS","idvSu' .
                'bResult":"HARD","idvProvider":"IDOLOGY","createdOn":"2020-02-21T22:00:00Z","raw":"<R' .
                'AW IDV processor output, for informational /debugging purposes only>","idvCheckType"' .
                ':"NON_DOCUMENTARY","idvDisposition":"FINAL","token":"idvc-7e7567e0-c2db-485d-896d-45' .
                '901a10baa9","links":[{"params":{"rel":"self"},"href":"https://platform.mypayquicker.' .
                'com/api/v2/users/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a/idv-checks/idvc-7e7567e0-' .
                'c2db-485d-896d-45901a10baa9"}]}],"links":[{"params":{"rel":"self"},"href":"https://p' .
                'latform.mypayquicker.com/api/v2/users/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a/idv-' .
                'checks"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve a list of all IDV check by IDVC token that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestRetrieveUserIDVCheck()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $idvcToken = 'idvc-7e7567e0-c2db-485d-896d-45901a10baa9';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->retrieveUserIDVCheck($userToken, $idvcToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"idvProviderReference":"yPV0h4o1Yw3QzdLAvA7a","idvResult":"PASS","idvSubResult":"HA' .
                'RD","idvProvider":"IDOLOGY","createdOn":"2020-02-21T22:00:00Z","raw":"<RAW IDV proce' .
                'ssor output, for informational/debugging purposes only>","idvCheckType":"NON_DOCUMEN' .
                'TARY","idvDispostion":"FINAL","token":"idvc-7e7567e0-c2db-485d-896d-45901a10baa9","l' .
                'inks":[{"params":{"rel":"self"},"href":"https://platform.mypayquicker.com/api/v2/use' .
                'rs/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a/idv-checks/idvc-7e7567e0-c2db-485d-896d' .
                '-45901a10baa9"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve a list of all user events that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListUserEvents()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';

        // Set callback and perform API call
        try {
            self::$controller->listUserEvents($userToken);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Retrieve a single user event
     */
    public function testTestRetrieveUserEvent()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $evntToken = 'evnt-28491de2-5b22-4e30-028a-45901a10baa9';

        // Set callback and perform API call
        try {
            self::$controller->retrieveUserEvent($userToken, $evntToken);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Accept a single program agreement
     */
    public function testTestAcceptProgramAgreement()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $agmtToken = 'agmt-45901a10-5b22-4e30-028a-45901a10baa9';

        // Set callback and perform API call
        try {
            self::$controller->acceptProgramAgreement($userToken, $agmtToken);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Retrieve a list of all accepted program agreements that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListAcceptedProgramAgreements()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';

        // Set callback and perform API call
        try {
            self::$controller->listAcceptedProgramAgreements($userToken);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
