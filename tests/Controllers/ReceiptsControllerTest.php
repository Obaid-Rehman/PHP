<?php
/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Tests;

use PQAPIV2Lib\Exceptions\ApiException;
use PQAPIV2Lib\Exceptions;
use PQAPIV2Lib\ApiHelper;
use PQAPIV2Lib\Models;
use PHPUnit\Framework\TestCase;

class ReceiptsControllerTest extends TestCase
{
    /**
     * @var \PQAPIV2Lib\Controllers\ReceiptsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getReceiptsController();
    }


    /**
     * Retrieve a list of all account(s) receipts that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListAccountReceipts()
    {
        // Parameters for the API call
        $acctToken = 'acct-b3f0570a-6586-4e00-8d6e-8a2bf93cfae4';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listAccountReceipts($acctToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"payload":[{"amount":5000.01,"currency":"USD","sourceToken":"acct-04017f57-8526-4b0' .
                'c-9152-5252975a86e4","destinationToken":"dest-04017f57-8526-4b0c-9152-5252975a86e4",' .
                '"createdOn":"2023-02-21T00:00:00Z"}],"meta":{"pageNo":"1","pageSize":"20","pageCount' .
                '":"85","recordCount":"1685","timezone":"GMT"},"links":[{"params":{"rel":"self"},"hre' .
                'f":"https://platform.mypayquicker.com/api/v2/accounts/acct-04017f57-8526-4b0c-9152-5' .
                '252975a86e4/receipts"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve a list all prepaid-card receipts that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListPrepaidCardReceipts()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $destToken = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listPrepaidCardReceipts($userToken, $destToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['X-TimeZone'] = null ;
        $headers['X-Paging-PageNo'] = null ;
        $headers['X-Paging-PageCount'] = null ;
        $headers['X-Paging-PageSize'] = null ;
        $headers['X-Paging-TotalRecordCount'] = null ;
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"payload":[{"amount":5000.05,"currency":"USD","sourceToken":"user-04017f57-8526-4b0' .
                'c-9152-5252975a86e4","destinationToken":"dest-04017f57-8526-4b0c-9152-5252975a86e4",' .
                '"createdOn":"2023-02-21T00:00:00Z"}],"meta":{"pageNo":"1","pageSize":"20","pageCount' .
                '":"85","recordCount":"1685","timezone":"GMT"},"links":[{"params":{"rel":"self"},"hre' .
                'f":"https://platform.mypayquicker.com/api/v2/users/user-04017f57-8526-4b0c-9152-5252' .
                '975a86e4/prepaid-cards/dest-04017f57-8526-4b0c-9152-5252975a86e4/receipts"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve a list all user receipts that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListUserReceipts()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listUserReceipts($userToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['X-TimeZone'] = null ;
        $headers['X-Paging-PageNo'] = null ;
        $headers['X-Paging-PageCount'] = null ;
        $headers['X-Paging-PageSize'] = null ;
        $headers['X-Paging-TotalRecordCount'] = null ;
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"payload":[{"amount":5000.01,"currency":"USD","sourceToken":"user-04017f57-8526-4b0' .
                'c-9152-5252975a86e4","destinationToken":"dest-04017f57-8526-4b0c-9152-5252975a86e4",' .
                '"createdOn":"2023-02-21T00:00:00Z"}],"meta":{"pageNo":"1","pageSize":"20","pageCount' .
                '":"85","recordCount":"1685","timezone":"GMT"},"links":[{"params":{"rel":"self"},"hre' .
                'f":"https://platform.mypayquicker.com/api/v2/users/user-04017f57-8526-4b0c-9152-5252' .
                '975a86e4/receipts"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
