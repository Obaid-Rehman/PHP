<?php
/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Tests;

use PQAPIV2Lib\Exceptions\ApiException;
use PQAPIV2Lib\Exceptions;
use PQAPIV2Lib\ApiHelper;
use PQAPIV2Lib\Models;
use PQAPIV2Lib\Utils\DateTimeHelper;
use PHPUnit\Framework\TestCase;

class PaymentsControllerTest extends TestCase
{
    /**
     * @var \PQAPIV2Lib\Controllers\PaymentsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getPaymentsController();
    }


    /**
     * Retrieve a list of all payments that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestRetrievePayment()
    {
        // Parameters for the API call
        $pmntToken = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20';
        $xMyPayQuickerVersion = '2020.02.24';
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->retrievePayment($pmntToken, $xMyPayQuickerVersion, $filter, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );
    }

    /**
     * Accept an open payment quote.
     */
    public function testTestAcceptPaymentQuote()
    {
        // Parameters for the API call
        $pmntToken = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20';
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->acceptPaymentQuote($pmntToken, $xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            201,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 201"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );
    }

    /**
     * Cancel an open payment quote.
     */
    public function testTestCancelPaymentQuote()
    {
        // Parameters for the API call
        $pmntToken = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        try {
            self::$controller->cancelPaymentQuote($pmntToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Perform a payment retraction for the full payment amount.
     */
    public function testTestRetractPaymentFull()
    {
        // Parameters for the API call
        $pmntToken = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        try {
            self::$controller->retractPaymentFull($pmntToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Perform a payment retraction for a partial payment amount.
     */
    public function testTestRetractPaymentPartial()
    {
        // Parameters for the API call
        $pmntToken = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        try {
            self::$controller->retractPaymentPartial($pmntToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Retrieve a list of all payments that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListPayments()
    {
        // Parameters for the API call
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listPayments($xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );
    }

    /**
     * Create a payment quote. 
     */
    public function testTestCreatePaymentQuote()
    {
        // Parameters for the API call
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->createPaymentQuote($xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            201,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 201"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );
    }
}
