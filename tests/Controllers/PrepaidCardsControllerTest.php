<?php
/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Tests;

use PQAPIV2Lib\Exceptions\ApiException;
use PQAPIV2Lib\Exceptions;
use PQAPIV2Lib\ApiHelper;
use PQAPIV2Lib\Models;
use PHPUnit\Framework\TestCase;

class PrepaidCardsControllerTest extends TestCase
{
    /**
     * @var \PQAPIV2Lib\Controllers\PrepaidCardsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getPrepaidCardsController();
    }


    /**
     * Replace an existing Prepaid Card specifying the replacement reason and the card package for the replacement card.
     */
    public function testTestReplacePrepaidCard()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $destToken = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79';
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->replacePrepaidCard($userToken, $destToken, $xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"QUEUED","createdOn":"' .
                '2020-02-21T22:00:00Z","country":"US","currency":"USD","cardPersonalization":"PERSONA' .
                'LIZED","cardPackage":"blue_consumer_10k","cardNetwork":"VISA","expires":"2023-02-21T' .
                '00:00:00Z","cardNumber":"1234 56** **** 1234","cvv":"123","links":[{"params":{"rel":' .
                '"self"},"href":"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/des' .
                't-37ba1fb7-6136-4216-bb13-f903af6b9f0d"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve Prepaid Card details by destination token.
     */
    public function testTestRetrievePrepaidCard()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $destToken = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->retrievePrepaidCard($userToken, $destToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"QUEUED","createdOn":"' .
                '2020-02-21T22:00:00Z","country":"US","currency":"USD","cardPersonalization":"PERSONA' .
                'LIZED","cardPackage":"blue_consumer_10k","cardNetwork":"VISA","expires":"2023-02-21T' .
                '00:00:00Z","cardNumber":"1234 56** **** 1234","cvv":"123","links":[{"params":{"rel":' .
                '"self"},"href":"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/des' .
                't-37ba1fb7-6136-4216-bb13-f903af6b9f0d"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Partial Prepaid Card update typically used when modifying card status. <i>*Does not require the entire object be passed in the request</i>
     */
    public function testTestUpdatePrepaidCardPartial()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $destToken = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79';
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->updatePrepaidCardPartial($userToken, $destToken, $xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"LOCKED","createdOn":"' .
                '2020-02-21T22:00:00Z","country":"US","currency":"USD","cardPersonalization":"PERSONA' .
                'LIZED","cardPackage":"blue_consumer_10k","cardNetwork":"VISA","expires":"2023-02-21T' .
                '00:00:00Z","cardNumber":"1234 56** **** 1234","cvv":"123","links":[{"params":{"rel":' .
                '"self"},"href":"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/des' .
                't-37ba1fb7-6136-4216-bb13-f903af6b9f0d"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve one part of a two-part token required to reveal or set a client side PIN. <i>*Not all programs support a reveal or set PIN operation.</i>
     */
    public function testTestGeneratePINOperationToken()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $destToken = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->generatePINOperationToken($userToken, $destToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );
    }

    /**
     * Retrieve a list of all pre-paid cards by user token that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListPrepaidCards()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listPrepaidCards($userToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"payload":[{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"QUEUED","' .
                'createdOn":"2020-02-21T22:00:00Z","country":"US","currency":"USD","cardPersonalizati' .
                'on":"PERSONALIZED","cardPackage":"blue_consumer_10k","cardNetwork":"VISA","expires":' .
                '"2023-02-21T00:00:00Z","cardNumber":"1234 56** **** 1234","cvv":"123","links":[{"par' .
                'ams":{"rel":"self"},"href":"https://platform.mypayquicker.com/api/v2/users/xxx/prepa' .
                'id-cards/dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d"}]}],"links":[{"params":{"rel":"s' .
                'elf"},"href":"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Order a pre-paid card for the user by specifying a cardPackage. <i>*A package defines the type of card, currency, artwork utilized, and often the method of delivery.</i>
     */
    public function testTestOrderPrepaidCard()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->orderPrepaidCard($userToken, $xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"QUEUED","createdOn":"' .
                '2020-02-21T22:00:00Z","country":"US","currency":"USD","cardPersonalization":"PERSONA' .
                'LIZED","cardPackage":"blue_consumer_10k","cardNetwork":"VISA","expires":"2023-02-21T' .
                '00:00:00Z","cardNumber":"1234 56** **** 1234","cvv":"123","links":[{"params":{"rel":' .
                '"self"},"href":"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/des' .
                't-37ba1fb7-6136-4216-bb13-f903af6b9f0d"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
