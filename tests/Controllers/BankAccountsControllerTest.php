<?php
/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Tests;

use PQAPIV2Lib\Exceptions\ApiException;
use PQAPIV2Lib\Exceptions;
use PQAPIV2Lib\ApiHelper;
use PQAPIV2Lib\Models;
use PHPUnit\Framework\TestCase;

class BankAccountsControllerTest extends TestCase
{
    /**
     * @var \PQAPIV2Lib\Controllers\BankAccountsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getBankAccountsController();
    }


    /**
     * Retrieve a list of bank accounts that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListBankAccounts()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->listBankAccounts($userToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"payload":[{"token":"dest-7d8b1c83-01bb-40fb-87d7-26bd4c303f01","status":"DELETED",' .
                '"createdOn":"2020-02-21T22:00:00Z","bankAccountOwnershipType":"PERSONAL","type":"CHE' .
                'CKING","fields":[{"key":"BANK_ACH_ABA","value":"333333333"},{"key":"BANK_BBAN","valu' .
                'e":"4444444444"}],"bankCurrency":"USD","bankCountry":"US","description":"My account"' .
                ',"links":[{"params":{"rel":"self"},"href":"string"}]},{"token":"dest-efacd12b-a86e-4' .
                'f44-bbea-927955ec1634","status":"ACTIVE","createdOn":"2020-02-21T22:00:00Z","bankAcc' .
                'ountOwnershipType":"PERSONAL","type":"CHECKING","fields":[{"key":"BANK_ACH_ABA","val' .
                'ue":"012346789"},{"key":"BANK_BBAN","value":"987654321"}],"bankCurrency":"USD","bank' .
                'Country":"US","description":"Personal checking account","links":[{"params":{"rel":"s' .
                'elf"},"href":"string"}]}],"links":[{"params":{"rel":"self"},"href":"string"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Create a quote for a bank account using a user token.
     */
    public function testTestCreateBankAccount()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->createBankAccount($userToken, $xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"token":"dest-efacd12b-a86e-4f44-bbea-927955ec1634","status":"ACTIVE","createdOn":"' .
                '2020-02-21T22:00:00Z","bankAccountOwnershipType":"PERSONAL","type":"CHECKING","field' .
                's":[{"key":"BANK_ACH_ABA","value":"012346789"},{"key":"BANK_BBAN","value":"987654321' .
                '"}],"bankCurrency":"USD","bankCountry":"US","description":"Personal checking account' .
                '","links":[{"params":{"rel":"self"},"href":"string"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Retrieve a list of bank accounts using a destination token that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestRetrieveBankAccount()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $destToken = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->retrieveBankAccount($userToken, $destToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"token":"dest-efacd12b-a86e-4f44-bbea-927955ec1634","status":"ACTIVE","createdOn":"' .
                '2020-02-21T22:00:00Z","bankAccountOwnershipType":"PERSONAL","type":"CHECKING","field' .
                's":[{"key":"BANK_ACH_ABA","value":"012346789"},{"key":"BANK_BBAN","value":"987654321' .
                '"}],"bankCurrency":"USD","bankCountry":"US","description":"Personal checking account' .
                '","links":[{"params":{"rel":"self"},"href":"string"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Update a bank account.
     */
    public function testTestUpdateBankAccount()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $destToken = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79';
        $xMyPayQuickerVersion = '2020.02.24';
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->updateBankAccount($userToken, $destToken, $xMyPayQuickerVersion, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"token":"dest-efacd12b-a86e-4f44-bbea-927955ec1634","status":"ACTIVE","createdOn":"' .
                '2020-02-21T22:00:00Z","bankAccountOwnershipType":"PERSONAL","type":"CHECKING","field' .
                's":[{"key":"BANK_ACH_ABA","value":"012346789"},{"key":"BANK_BBAN","value":"987654321' .
                '"}],"bankCurrency":"USD","bankCountry":"US","description":"Personal checking account' .
                '","links":[{"params":{"rel":"self"},"href":"string"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Delete (cloak) a user bank account.
     */
    public function testTestDeleteBankAccount()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $destToken = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        try {
            self::$controller->deleteBankAccount($userToken, $destToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Retrieve requirements for adding a bank account using the parameters provided (user context, given country of residence, supported EFT provider(s), destination currency, destination country, required fields, with names, and regex validation expression) for easy customer wire-up and validation.
     */
    public function testTestGetBankAccountRequirements()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->getBankAccountRequirements($userToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"payload":[{"bankCountry":"IT","bankCurrency":"EUR","requirements":[{"requirement":' .
                '"BANK_IBAN","format":{"example":"IT43K0310412701000000820420","legend":[{"key":"IT43' .
                'K0310412701000000820420","descriptions":[{"language":"en-US","translation":"Example ' .
                'IBAN"},{"language":"it-IT","translation":"Esempio IBAN"}]}]},"description":[{"langua' .
                'ge":"en-US","translation":"IBAN"},{"language":"it-IT","translation":"IBAN"}],"valida' .
                'tors":[{"validatorType":"REGEX","expression":"^IT\\\\\\\\d{2}[A-Z]\\\\\\\\d{10}[0-9A-Z]{12}$' .
                '"}]},{"requirement":"BANK_SWIFT_BIC","format":{"example":"01234567890","legend":[{"k' .
                'ey":"01234567890","descriptions":[{"language":"en-US","translation":"Example Swift/B' .
                'IC"},{"language":"it-IT","translation":"Esempio Swift/BIC"}]}]},"description":[{"lan' .
                'guage":"en-US","translation":"Swift/BIC"},{"language":"it-IT","translation":"Swift/B' .
                'IC"}],"validators":[{"validatorType":"REGEX","expression":"^[a-z0-9A-Z]{8,11}$"}]}],' .
                '"quote":{"formattedAmount":"$4.32 USD (USD, en-US), 0,00 € EUR (EUR, fr-FR)","amount' .
                '":4.32,"currency":"USD"},"links":[{"params":{"rel":"self"},"href":"string"}]}],"link' .
                's":[{"params":{"rel":"self"},"href":"string"}]}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
