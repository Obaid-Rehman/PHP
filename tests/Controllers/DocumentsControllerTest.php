<?php
/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Tests;

use PQAPIV2Lib\Exceptions\ApiException;
use PQAPIV2Lib\Exceptions;
use PQAPIV2Lib\ApiHelper;
use PQAPIV2Lib\Models;
use PHPUnit\Framework\TestCase;

class DocumentsControllerTest extends TestCase
{
    /**
     * @var \PQAPIV2Lib\Controllers\DocumentsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getDocumentsController();
    }


    /**
     * Retrieve a list of user documents that supports filtering, sorting, and pagination through existing mechanisms.
     */
    public function testTestListUserDocuments()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        try {
            self::$controller->listUserDocuments($userToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Create a quote for a user document.
     */
    public function testTestCreateUserDocument()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        try {
            self::$controller->createUserDocument($userToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Retrieve an individual user document by its document token.
     */
    public function testTestRetrieveUserDocument()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $docuToken = 'docu-6260c132-5cb1-4e30-8b08-9ce559893acb';
        $xMyPayQuickerVersion = '2020.02.24';
        $page = null;
        $pageSize = 20;
        $filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\'';
        $sort = '-name';
        $language = Models\LanguageTypesEnum::ENUS;

        // Set callback and perform API call
        try {
            self::$controller->retrieveUserDocument($userToken, $docuToken, $xMyPayQuickerVersion, $page, $pageSize, $filter, $sort, $language);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Replace the user document at the given document token.
     */
    public function testTestReplaceUserDocument()
    {
        // Parameters for the API call
        $userToken = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a';
        $docuToken = 'docu-6260c132-5cb1-4e30-8b08-9ce559893acb';
        $xMyPayQuickerVersion = '2020.02.24';

        // Set callback and perform API call
        try {
            self::$controller->replaceUserDocument($userToken, $docuToken, $xMyPayQuickerVersion);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
