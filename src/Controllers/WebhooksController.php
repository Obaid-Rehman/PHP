<?php

declare(strict_types=1);

/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Controllers;

use PQAPIV2Lib\Exceptions\ApiException;
use PQAPIV2Lib\ApiHelper;
use PQAPIV2Lib\ConfigurationInterface;
use PQAPIV2Lib\Models;
use PQAPIV2Lib\Http\HttpRequest;
use PQAPIV2Lib\Http\HttpResponse;
use PQAPIV2Lib\Http\HttpMethod;
use PQAPIV2Lib\Http\HttpContext;
use PQAPIV2Lib\Http\HttpCallBack;
use Unirest\Request;

class WebhooksController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Retrieve a list of all webhook subscriptions that supports filtering, sorting, and pagination
     * through existing mechanisms.
     *
     * @param string $xMyPayQuickerVersion Date-based API Version specified in the header
     *        <i>required</i> on all calls.
     *
     * @return Models\WebhookCollectionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listWebhookSubscriptions(string $xMyPayQuickerVersion): Models\WebhookCollectionResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/webhooks';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'           => self::$userAgent,
            'Accept'               => 'application/json',
            'X-MyPayQuicker-Version' => $xMyPayQuickerVersion
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'WebhookCollectionResponse');
    }

    /**
     * Create a webhook subscription for a given URL and namespace. When this event fires, the webhook
     * receives a call from the API.
     *
     * @param string $xMyPayQuickerVersion Date-based API Version specified in the header
     *        <i>required</i> on all calls.
     * @param Models\WebhookSubscription|null $body
     *
     * @return Models\WebhookSubscriptionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createWebhookSubscription(
        string $xMyPayQuickerVersion,
        ?Models\WebhookSubscription $body = null
    ): Models\WebhookSubscriptionResponse {
        //prepare query string for API call
        $_queryBuilder = '/webhooks';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'           => self::$userAgent,
            'Accept'               => 'application/json',
            'X-MyPayQuicker-Version' => $xMyPayQuickerVersion,
            'Content-Type'           => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'WebhookSubscriptionResponse');
    }

    /**
     * Retrieve a single webhook subscription using the webhook token.
     *
     * @param string $webhToken
     * @param string $xMyPayQuickerVersion Date-based API Version specified in the header
     *        <i>required</i> on all calls.
     *
     * @return Models\WebhookSubscriptionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function retrieveWebhookSubscription(
        string $webhToken,
        string $xMyPayQuickerVersion
    ): Models\WebhookSubscriptionResponse {
        //prepare query string for API call
        $_queryBuilder = '/webhooks/{webh-token}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webh-token'             => $webhToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'           => self::$userAgent,
            'Accept'               => 'application/json',
            'X-MyPayQuicker-Version' => $xMyPayQuickerVersion
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'WebhookSubscriptionResponse');
    }

    /**
     * Delete a webhook subscription. Deleted webhooks no longer receive notifications about events.
     * Deleting an already deleted webhook will result in a successful 200 (OK) response code.
     *
     * @param string $webhToken
     * @param string $xMyPayQuickerVersion Date-based API Version specified in the header
     *        <i>required</i> on all calls.
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteWebhookSubscription(string $webhToken, string $xMyPayQuickerVersion): void
    {
        //prepare query string for API call
        $_queryBuilder = '/webhooks/{webh-token}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webh-token'             => $webhToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'           => self::$userAgent,
            'X-MyPayQuicker-Version' => $xMyPayQuickerVersion
        ];

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::delete($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }
}
