<?php

declare(strict_types=1);

/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Models;

use stdClass;

class PhoneNumbers implements \JsonSerializable
{
    /**
     * @var string
     */
    private $phoneNumber;

    /**
     * @var string
     */
    private $mobileNumber;

    /**
     * @var string
     */
    private $phoneNumberCountry;

    /**
     * @var string
     */
    private $mobileNumberCountry;

    /**
     * @param string $phoneNumber
     * @param string $mobileNumber
     * @param string $phoneNumberCountry
     * @param string $mobileNumberCountry
     */
    public function __construct(
        string $phoneNumber,
        string $mobileNumber,
        string $phoneNumberCountry,
        string $mobileNumberCountry
    ) {
        $this->phoneNumber = $phoneNumber;
        $this->mobileNumber = $mobileNumber;
        $this->phoneNumberCountry = $phoneNumberCountry;
        $this->mobileNumberCountry = $mobileNumberCountry;
    }

    /**
     * Returns Phone Number.
     * The E.164 formatted primary phone number. This can be the same as the mobile number.
     */
    public function getPhoneNumber(): string
    {
        return $this->phoneNumber;
    }

    /**
     * Sets Phone Number.
     * The E.164 formatted primary phone number. This can be the same as the mobile number.
     *
     * @required
     * @maps phoneNumber
     */
    public function setPhoneNumber(string $phoneNumber): void
    {
        $this->phoneNumber = $phoneNumber;
    }

    /**
     * Returns Mobile Number.
     * The E.164 formatted mobile phone number, required by most financial institutions for account
     * creation, verification, or PSD2 (3DS). Mobile numbers must be unique to a user within a tenant and
     * cannot be shared.
     */
    public function getMobileNumber(): string
    {
        return $this->mobileNumber;
    }

    /**
     * Sets Mobile Number.
     * The E.164 formatted mobile phone number, required by most financial institutions for account
     * creation, verification, or PSD2 (3DS). Mobile numbers must be unique to a user within a tenant and
     * cannot be shared.
     *
     * @required
     * @maps mobileNumber
     */
    public function setMobileNumber(string $mobileNumber): void
    {
        $this->mobileNumber = $mobileNumber;
    }

    /**
     * Returns Phone Number Country.
     * Two-digit country code types
     */
    public function getPhoneNumberCountry(): string
    {
        return $this->phoneNumberCountry;
    }

    /**
     * Sets Phone Number Country.
     * Two-digit country code types
     *
     * @required
     * @maps phoneNumberCountry
     */
    public function setPhoneNumberCountry(string $phoneNumberCountry): void
    {
        $this->phoneNumberCountry = $phoneNumberCountry;
    }

    /**
     * Returns Mobile Number Country.
     * Two-digit country code types
     */
    public function getMobileNumberCountry(): string
    {
        return $this->mobileNumberCountry;
    }

    /**
     * Sets Mobile Number Country.
     * Two-digit country code types
     *
     * @required
     * @maps mobileNumberCountry
     */
    public function setMobileNumberCountry(string $mobileNumberCountry): void
    {
        $this->mobileNumberCountry = $mobileNumberCountry;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['phoneNumber']         = $this->phoneNumber;
        $json['mobileNumber']        = $this->mobileNumber;
        $json['phoneNumberCountry']  = $this->phoneNumberCountry;
        $json['mobileNumberCountry'] = $this->mobileNumberCountry;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
