<?php

declare(strict_types=1);

/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Models;

use stdClass;

/**
 * Classifies the legend format of the required information for a bank account
 */
class BankAccountRequirementFormatLegend implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $key;

    /**
     * @var KeyValuePairLanguageTypeString[]|null
     */
    private $descriptions;

    /**
     * Returns Key.
     */
    public function getKey(): ?string
    {
        return $this->key;
    }

    /**
     * Sets Key.
     *
     * @maps key
     */
    public function setKey(?string $key): void
    {
        $this->key = $key;
    }

    /**
     * Returns Descriptions.
     * Localized requirement description for display purposes
     *
     * @return KeyValuePairLanguageTypeString[]|null
     */
    public function getDescriptions(): ?array
    {
        return $this->descriptions;
    }

    /**
     * Sets Descriptions.
     * Localized requirement description for display purposes
     *
     * @maps descriptions
     *
     * @param KeyValuePairLanguageTypeString[]|null $descriptions
     */
    public function setDescriptions(?array $descriptions): void
    {
        $this->descriptions = $descriptions;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->key)) {
            $json['key']          = $this->key;
        }
        if (isset($this->descriptions)) {
            $json['descriptions'] = $this->descriptions;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
