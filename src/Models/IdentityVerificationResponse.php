<?php

declare(strict_types=1);

/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Models;

use PQAPIV2Lib\Utils\DateTimeHelper;
use stdClass;

class IdentityVerificationResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $idvProviderReference;

    /**
     * @var string|null
     */
    private $idvResult;

    /**
     * @var string|null
     */
    private $idvSubResult;

    /**
     * @var string|null
     */
    private $idvProvider;

    /**
     * @var \DateTime|null
     */
    private $createdOn;

    /**
     * @var string|null
     */
    private $raw;

    /**
     * @var string|null
     */
    private $idvCheckType;

    /**
     * @var string|null
     */
    private $idvDispostion;

    /**
     * @var string|null
     */
    private $token;

    /**
     * @var HaetosParams[]|null
     */
    private $links;

    /**
     * Returns Idv Provider Reference.
     * IDV provider unique ID for the IDV check performed
     */
    public function getIdvProviderReference(): ?string
    {
        return $this->idvProviderReference;
    }

    /**
     * Sets Idv Provider Reference.
     * IDV provider unique ID for the IDV check performed
     *
     * @maps idvProviderReference
     */
    public function setIdvProviderReference(?string $idvProviderReference): void
    {
        $this->idvProviderReference = $idvProviderReference;
    }

    /**
     * Returns Idv Result.
     * In combination with the <i>Disposition</i> type, the <i>Result</i> type provides the results of an
     * IDV check. A <i>Dispositioned</i> result of <i>FINAL PASS</i> represents a passing check, whereas a
     * <i>TRANSIENT FAIL</i> is still being processed but has failed at least one phase of the check. Until
     * the disposition is <i>FINAL</i>, a result has not been determined.
     */
    public function getIdvResult(): ?string
    {
        return $this->idvResult;
    }

    /**
     * Sets Idv Result.
     * In combination with the <i>Disposition</i> type, the <i>Result</i> type provides the results of an
     * IDV check. A <i>Dispositioned</i> result of <i>FINAL PASS</i> represents a passing check, whereas a
     * <i>TRANSIENT FAIL</i> is still being processed but has failed at least one phase of the check. Until
     * the disposition is <i>FINAL</i>, a result has not been determined.
     *
     * @maps idvResult
     */
    public function setIdvResult(?string $idvResult): void
    {
        $this->idvResult = $idvResult;
    }

    /**
     * Returns Idv Sub Result.
     * If used by a provider, sub-results that give additional insight into the results, including whether
     * they result was <i>Soft</i> or <i>Hard</i>. <i>Soft</i> results may have additional recourse that
     * can be leveraged to validate a user’s identity.
     */
    public function getIdvSubResult(): ?string
    {
        return $this->idvSubResult;
    }

    /**
     * Sets Idv Sub Result.
     * If used by a provider, sub-results that give additional insight into the results, including whether
     * they result was <i>Soft</i> or <i>Hard</i>. <i>Soft</i> results may have additional recourse that
     * can be leveraged to validate a user’s identity.
     *
     * @maps idvSubResult
     */
    public function setIdvSubResult(?string $idvSubResult): void
    {
        $this->idvSubResult = $idvSubResult;
    }

    /**
     * Returns Idv Provider.
     * Provider types of verification that can be used for performing identity checks
     */
    public function getIdvProvider(): ?string
    {
        return $this->idvProvider;
    }

    /**
     * Sets Idv Provider.
     * Provider types of verification that can be used for performing identity checks
     *
     * @maps idvProvider
     */
    public function setIdvProvider(?string $idvProvider): void
    {
        $this->idvProvider = $idvProvider;
    }

    /**
     * Returns Created On.
     * Time at which the object was created.
     */
    public function getCreatedOn(): ?\DateTime
    {
        return $this->createdOn;
    }

    /**
     * Sets Created On.
     * Time at which the object was created.
     *
     * @maps createdOn
     * @factory \PQAPIV2Lib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedOn(?\DateTime $createdOn): void
    {
        $this->createdOn = $createdOn;
    }

    /**
     * Returns Raw.
     * Contains the raw (unprocessed) output from the IDV provider. Format of the raw output can vary
     * widely and is not documented. *For reference/debugging only
     */
    public function getRaw(): ?string
    {
        return $this->raw;
    }

    /**
     * Sets Raw.
     * Contains the raw (unprocessed) output from the IDV provider. Format of the raw output can vary
     * widely and is not documented. *For reference/debugging only
     *
     * @maps raw
     */
    public function setRaw(?string $raw): void
    {
        $this->raw = $raw;
    }

    /**
     * Returns Idv Check Type.
     * Types of verification used for performing identity checks (<i>documentary</i>, <i>non-
     * documentary</i>, <i>OFAC</i>, etc.)
     */
    public function getIdvCheckType(): ?string
    {
        return $this->idvCheckType;
    }

    /**
     * Sets Idv Check Type.
     * Types of verification used for performing identity checks (<i>documentary</i>, <i>non-
     * documentary</i>, <i>OFAC</i>, etc.)
     *
     * @maps idvCheckType
     */
    public function setIdvCheckType(?string $idvCheckType): void
    {
        $this->idvCheckType = $idvCheckType;
    }

    /**
     * Returns Idv Dispostion.
     * In combination with the <i>Disposition</i> type, the <i>Result</i> type provides the results of an
     * IDV check. A <i>Dispositioned</i> result of <i>FINAL PASS</i> represents a passing check, whereas a
     * <i>TRANSIENT FAIL</i> is still being processed but has failed at least one phase of the check. Until
     * the disposition is <i>FINAL</i>, a result has not been determined.
     */
    public function getIdvDispostion(): ?string
    {
        return $this->idvDispostion;
    }

    /**
     * Sets Idv Dispostion.
     * In combination with the <i>Disposition</i> type, the <i>Result</i> type provides the results of an
     * IDV check. A <i>Dispositioned</i> result of <i>FINAL PASS</i> represents a passing check, whereas a
     * <i>TRANSIENT FAIL</i> is still being processed but has failed at least one phase of the check. Until
     * the disposition is <i>FINAL</i>, a result has not been determined.
     *
     * @maps idvDispostion
     */
    public function setIdvDispostion(?string $idvDispostion): void
    {
        $this->idvDispostion = $idvDispostion;
    }

    /**
     * Returns Token.
     * Token representing the resource, prefixed with <i>user-</i>, <i>dest-</i>, <i>xfer-</i>, <i>acct-
     * </i>, <i>pmnt-</i>, or <i>docu-</i>.
     */
    public function getToken(): ?string
    {
        return $this->token;
    }

    /**
     * Sets Token.
     * Token representing the resource, prefixed with <i>user-</i>, <i>dest-</i>, <i>xfer-</i>, <i>acct-
     * </i>, <i>pmnt-</i>, or <i>docu-</i>.
     *
     * @maps token
     */
    public function setToken(?string $token): void
    {
        $this->token = $token;
    }

    /**
     * Returns Links.
     *
     * @return HaetosParams[]|null
     */
    public function getLinks(): ?array
    {
        return $this->links;
    }

    /**
     * Sets Links.
     *
     * @maps links
     *
     * @param HaetosParams[]|null $links
     */
    public function setLinks(?array $links): void
    {
        $this->links = $links;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->idvProviderReference)) {
            $json['idvProviderReference'] = $this->idvProviderReference;
        }
        if (isset($this->idvResult)) {
            $json['idvResult']            = $this->idvResult;
        }
        if (isset($this->idvSubResult)) {
            $json['idvSubResult']         = $this->idvSubResult;
        }
        if (isset($this->idvProvider)) {
            $json['idvProvider']          = $this->idvProvider;
        }
        if (isset($this->createdOn)) {
            $json['createdOn']            = DateTimeHelper::toRfc3339DateTime($this->createdOn);
        }
        if (isset($this->raw)) {
            $json['raw']                  = $this->raw;
        }
        if (isset($this->idvCheckType)) {
            $json['idvCheckType']         = $this->idvCheckType;
        }
        if (isset($this->idvDispostion)) {
            $json['idvDispostion']        = $this->idvDispostion;
        }
        if (isset($this->token)) {
            $json['token']                = $this->token;
        }
        if (isset($this->links)) {
            $json['links']                = $this->links;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
