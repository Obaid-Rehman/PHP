<?php

declare(strict_types=1);

/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Models;

use stdClass;

/**
 * If used by a provider, sub-results that give additional insight into the results, including whether
 * they result was <i>Soft</i> or <i>Hard</i>. <i>Soft</i> results may have additional recourse that
 * can be leveraged to validate a user’s identity.
 */
class IdentityVerificationSubResultType implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $idvSubResult;

    /**
     * Returns Idv Sub Result.
     * If used by a provider, sub-results that give additional insight into the results, including whether
     * they result was <i>Soft</i> or <i>Hard</i>. <i>Soft</i> results may have additional recourse that
     * can be leveraged to validate a user’s identity.
     */
    public function getIdvSubResult(): ?string
    {
        return $this->idvSubResult;
    }

    /**
     * Sets Idv Sub Result.
     * If used by a provider, sub-results that give additional insight into the results, including whether
     * they result was <i>Soft</i> or <i>Hard</i>. <i>Soft</i> results may have additional recourse that
     * can be leveraged to validate a user’s identity.
     *
     * @maps idvSubResult
     */
    public function setIdvSubResult(?string $idvSubResult): void
    {
        $this->idvSubResult = $idvSubResult;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->idvSubResult)) {
            $json['idvSubResult'] = $this->idvSubResult;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
