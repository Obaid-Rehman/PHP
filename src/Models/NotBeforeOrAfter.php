<?php

declare(strict_types=1);

/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Models;

use PQAPIV2Lib\Utils\DateTimeHelper;
use stdClass;

class NotBeforeOrAfter implements \JsonSerializable
{
    /**
     * @var \DateTime|null
     */
    private $notBefore;

    /**
     * @var \DateTime|null
     */
    private $notAfter;

    /**
     * Returns Not Before.
     * Transfer is scheduled and will not process before this time.
     */
    public function getNotBefore(): ?\DateTime
    {
        return $this->notBefore;
    }

    /**
     * Sets Not Before.
     * Transfer is scheduled and will not process before this time.
     *
     * @maps notBefore
     * @factory \PQAPIV2Lib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setNotBefore(?\DateTime $notBefore): void
    {
        $this->notBefore = $notBefore;
    }

    /**
     * Returns Not After.
     * Transfer expires if not completed prior to this time.
     */
    public function getNotAfter(): ?\DateTime
    {
        return $this->notAfter;
    }

    /**
     * Sets Not After.
     * Transfer expires if not completed prior to this time.
     *
     * @maps notAfter
     * @factory \PQAPIV2Lib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setNotAfter(?\DateTime $notAfter): void
    {
        $this->notAfter = $notAfter;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->notBefore)) {
            $json['notBefore'] = DateTimeHelper::toRfc3339DateTime($this->notBefore);
        }
        if (isset($this->notAfter)) {
            $json['notAfter']  = DateTimeHelper::toRfc3339DateTime($this->notAfter);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
