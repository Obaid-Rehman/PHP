<?php

declare(strict_types=1);

/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Models;

use stdClass;

/**
 * Specifies the validator type for the required bank account information
 */
class BankAccountRequirementValidator implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $validatorType;

    /**
     * @var string
     */
    private $expression;

    /**
     * @param string $expression
     */
    public function __construct(string $expression)
    {
        $this->expression = $expression;
    }

    /**
     * Returns Validator Type.
     */
    public function getValidatorType(): ?string
    {
        return $this->validatorType;
    }

    /**
     * Sets Validator Type.
     *
     * @maps validatorType
     */
    public function setValidatorType(?string $validatorType): void
    {
        $this->validatorType = $validatorType;
    }

    /**
     * Returns Expression.
     * Validation regular expression
     */
    public function getExpression(): string
    {
        return $this->expression;
    }

    /**
     * Sets Expression.
     * Validation regular expression
     *
     * @required
     * @maps expression
     */
    public function setExpression(string $expression): void
    {
        $this->expression = $expression;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->validatorType)) {
            $json['validatorType'] = $this->validatorType;
        }
        $json['expression']        = $this->expression;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
