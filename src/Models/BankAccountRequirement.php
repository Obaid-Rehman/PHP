<?php

declare(strict_types=1);

/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PQAPIV2Lib\Models;

use stdClass;

/**
 * Classifies the format of the required information for a bank account
 */
class BankAccountRequirement implements \JsonSerializable
{
    /**
     * @var string
     */
    private $bankCountry;

    /**
     * @var string
     */
    private $bankCurrency;

    /**
     * @var string|null
     */
    private $sourceCountry;

    /**
     * @var string|null
     */
    private $sourceCurrency;

    /**
     * @var BankAccountRequiredFields[]|null
     */
    private $requirements;

    /**
     * @var MonetaryFormatted|null
     */
    private $quote;

    /**
     * @param string $bankCountry
     * @param string $bankCurrency
     */
    public function __construct(string $bankCountry, string $bankCurrency)
    {
        $this->bankCountry = $bankCountry;
        $this->bankCurrency = $bankCurrency;
    }

    /**
     * Returns Bank Country.
     * Two-digit country code types
     */
    public function getBankCountry(): string
    {
        return $this->bankCountry;
    }

    /**
     * Sets Bank Country.
     * Two-digit country code types
     *
     * @required
     * @maps bankCountry
     */
    public function setBankCountry(string $bankCountry): void
    {
        $this->bankCountry = $bankCountry;
    }

    /**
     * Returns Bank Currency.
     * Currency code type for the object
     */
    public function getBankCurrency(): string
    {
        return $this->bankCurrency;
    }

    /**
     * Sets Bank Currency.
     * Currency code type for the object
     *
     * @required
     * @maps bankCurrency
     */
    public function setBankCurrency(string $bankCurrency): void
    {
        $this->bankCurrency = $bankCurrency;
    }

    /**
     * Returns Source Country.
     * Two-digit country code types
     */
    public function getSourceCountry(): ?string
    {
        return $this->sourceCountry;
    }

    /**
     * Sets Source Country.
     * Two-digit country code types
     *
     * @maps sourceCountry
     */
    public function setSourceCountry(?string $sourceCountry): void
    {
        $this->sourceCountry = $sourceCountry;
    }

    /**
     * Returns Source Currency.
     * Currency code type for the object
     */
    public function getSourceCurrency(): ?string
    {
        return $this->sourceCurrency;
    }

    /**
     * Sets Source Currency.
     * Currency code type for the object
     *
     * @maps sourceCurrency
     */
    public function setSourceCurrency(?string $sourceCurrency): void
    {
        $this->sourceCurrency = $sourceCurrency;
    }

    /**
     * Returns Requirements.
     *
     * @return BankAccountRequiredFields[]|null
     */
    public function getRequirements(): ?array
    {
        return $this->requirements;
    }

    /**
     * Sets Requirements.
     *
     * @maps requirements
     *
     * @param BankAccountRequiredFields[]|null $requirements
     */
    public function setRequirements(?array $requirements): void
    {
        $this->requirements = $requirements;
    }

    /**
     * Returns Quote.
     * Object representing monies, including currency, decimal, and formatted amounts
     */
    public function getQuote(): ?MonetaryFormatted
    {
        return $this->quote;
    }

    /**
     * Sets Quote.
     * Object representing monies, including currency, decimal, and formatted amounts
     *
     * @maps quote
     */
    public function setQuote(?MonetaryFormatted $quote): void
    {
        $this->quote = $quote;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['bankCountry']        = $this->bankCountry;
        $json['bankCurrency']       = $this->bankCurrency;
        if (isset($this->sourceCountry)) {
            $json['sourceCountry']  = $this->sourceCountry;
        }
        if (isset($this->sourceCurrency)) {
            $json['sourceCurrency'] = $this->sourceCurrency;
        }
        if (isset($this->requirements)) {
            $json['requirements']   = $this->requirements;
        }
        if (isset($this->quote)) {
            $json['quote']          = $this->quote;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
